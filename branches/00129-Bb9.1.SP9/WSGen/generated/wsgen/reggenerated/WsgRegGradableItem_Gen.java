
package wsgen.reggenerated;

import java.util.ArrayList;
import java.util.List;
import wsgen.WsgApiDataKind;
import wsgen.WsgApiOperationKind;
import wsgen.WsgApiRegulationStruct;
import wsgen.WsgBbGetterRegulationStruct;
import wsgen.WsgBbSetterRegulationStruct;
import wsgen.WsgRegulation;

public class WsgRegGradableItem_Gen
    extends WsgRegulation
{


    @Override
    protected void fillExcludedBbToucherMethodNamesMap() {
        String comment;
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("blackboard.base.FormattedText getDescriptionForDisplay();", comment);
        comment = "!! Missing corresponding SET method. Covered through get/setCourseContentId. CourseContent needs separate WS API.";
        this.excludedBbToucherMethodNamesMap.put("blackboard.data.content.Content getCourseContent();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("blackboard.persist.DataType getDataType();", comment);
        comment = "!! Functionality is implemeted though GradingSchemaId, GradingSchema by itself needs individual WS API interface.";
        this.excludedBbToucherMethodNamesMap.put("blackboard.platform.gradebook2.GradingSchema getGradingSchema();", comment);
        comment = "Unrecognized method naming convention";
        this.excludedBbToucherMethodNamesMap.put("blackboard.platform.gradebook2.GradingSchema loadGradingSchema();", comment);
        comment = "!! Missing corresponding SET method. ScoreProvider is accessed through ScoreProviderHandle. ScoreProvider may need indivudual API.";
        this.excludedBbToucherMethodNamesMap.put("blackboard.platform.gradebook2.ScoreProvider getScoreProvider();", comment);
        comment = "Unrecognized method naming convention";
        this.excludedBbToucherMethodNamesMap.put("boolean equals(java.lang.Object);", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean hasGrades();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean isAllowMultipleAttempts();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean isAllowUnlimitedAttempts();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean isCalculated();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean isDueDateSet();", comment);
        comment = "!! GET has a parameter. It is calculated field: return (this._scorable) && (this._calculatedInd == CalculationType.NON_CALCULATED) && ((this._points > 0.0D) || (includeExtraCredits));";
        this.excludedBbToucherMethodNamesMap.put("boolean isGradeItem(boolean);", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean isManual();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("boolean isUsedInCalculation();", comment);
        comment = "Inappropriate GET return type or parameters";
        this.excludedBbToucherMethodNamesMap.put("int getMaxLength(java.lang.String);", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("int hashCode();", comment);
        comment = "!! GET has a parameter. Score is similar to SchemaValue and calculated by BaseGradingSchema.Type. Score and SchemaValue are different visual representation of grade value";
        this.excludedBbToucherMethodNamesMap.put("java.lang.Double getScore(java.lang.String);", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getDisplayColumnName();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getDisplayPoints();", comment);
        comment = "!! GET has parameters. It is calculated from other fields.";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getExtendedTitle(blackboard.util.GradeFormat, blackboard.platform.intl.BbResourceBundle, java.util.HashMap);", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getExternalId();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getFormattedDateAdded();", comment);
        comment = "Missing corresponding SET method";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getFormattedDueDate();", comment);
        comment = "Inappropriate GET return type or parameters";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getPointsPossible(blackboard.util.GradeFormat, blackboard.platform.intl.BbResourceBundle);", comment);
        comment = "!! GET has a parameter. SchemaValue is calculated by BaseGradingSchema.Type. May be an appropriate way to access it would be through GradingSchema WS API, not as the data field";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String getSchemaValue(java.lang.Double);", comment);
        comment = "Unrecognized method naming convention";
        this.excludedBbToucherMethodNamesMap.put("java.lang.String toString();", comment);
        comment = "!! Functionality is implemeted though GradingSchemaId, GradingSchema by itself needs individual WS API interface.";
        this.excludedBbToucherMethodNamesMap.put("void setGradingSchema(blackboard.platform.gradebook2.GradingSchema);", comment);
    }

    @Override
    protected void fillBBToucher2wsFieldMaps() {
        String key;
        key = "blackboard.platform.gradebook2.GradableItem$AttemptAggregationModel getAggregationModel();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getAggregationModel", "", "aggregationModel", "blackboard.platform.gradebook2.GradableItem$AttemptAggregationModel"));
        key = "void setAggregationModel(blackboard.platform.gradebook2.GradableItem$AttemptAggregationModel);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setAggregationModel", "aggregationModel", "blackboard.platform.gradebook2.GradableItem$AttemptAggregationModel"));
        key = "blackboard.persist.Id getAssessmentId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getAssessmentId", "", "assessmentId", "blackboard.persist.Id"));
        key = "void setAssessmentId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setAssessmentId", "assessmentId", "blackboard.persist.Id"));
        key = "blackboard.persist.Id getId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getId", "", "bbId", "blackboard.persist.Id"));
        key = "void setId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setId", "bbId", "blackboard.persist.Id"));
        key = "long getVersion();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getVersion", "", "bookVersion", "long"));
        key = "void setVersion(blackboard.persist.RowVersion);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setVersion", "bookVersion", "blackboard.persist.RowVersion"));
        key = "blackboard.platform.gradebook2.GradableItem$CalculationType getCalculatedInd();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getCalculatedInd", "", "calculatedInd", "blackboard.platform.gradebook2.GradableItem$CalculationType"));
        key = "void setCalculatedInd(blackboard.platform.gradebook2.GradableItem$CalculationType);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setCalculatedInd", "calculatedInd", "blackboard.platform.gradebook2.GradableItem$CalculationType"));
        key = "java.lang.String getCategory();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getCategory", "", "category", "java.lang.String"));
        key = "void setCategory(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setCategory", "category", "java.lang.String"));
        key = "blackboard.persist.Id getCategoryId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getCategoryId", "", "categoryId", "blackboard.persist.Id"));
        key = "void setCategoryId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setCategoryId", "categoryId", "blackboard.persist.Id"));
        key = "blackboard.persist.Id getCourseContentId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getCourseContentId", "", "courseContentId", "blackboard.persist.Id"));
        key = "void setCourseContentId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setCourseContentId", "courseContentId", "blackboard.persist.Id"));
        key = "blackboard.persist.Id getCourseId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getCourseId", "", "courseId", "blackboard.persist.Id"));
        key = "void setCourseId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setCourseId", "courseId", "blackboard.persist.Id"));
        key = "java.util.Calendar getDateAdded();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getDateAdded", "", "dateAdded", "java.util.Calendar"));
        key = "void setDateAdded(java.util.Calendar);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setDateAdded", "dateAdded", "java.util.Calendar"));
        key = "java.util.Calendar getDateModified();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getDateModified", "", "dateModified", "java.util.Calendar"));
        key = "void setDateModified(java.util.Calendar);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setDateModified", "dateModified", "java.util.Calendar"));
        key = "blackboard.base.FormattedText getDescription();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getDescription", "", "description", "blackboard.base.FormattedText"));
        key = "void setDescription(blackboard.base.FormattedText);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setDescription", "description", "blackboard.base.FormattedText"));
        key = "java.lang.String getDisplayTitle();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getDisplayTitle", "", "displayTitle", "java.lang.String"));
        key = "void setDisplayTitle(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setDisplayTitle", "displayTitle", "java.lang.String"));
        key = "java.util.Calendar getDueDate();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getDueDate", "", "dueDate", "java.util.Calendar"));
        key = "void setDueDate(java.util.Calendar);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setDueDate", "dueDate", "java.util.Calendar"));
        key = "java.lang.String getExternalAnalysisUrl();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getExternalAnalysisUrl", "", "externalAnalysisUrl", "java.lang.String"));
        key = "void setExternalAnalysisUrl(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setExternalAnalysisUrl", "externalAnalysisUrl", "java.lang.String"));
        key = "java.lang.String getExternalAttemptHandlerUrl();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getExternalAttemptHandlerUrl", "", "externalAttemptHandlerUrl", "java.lang.String"));
        key = "void setExternalAttemptHandlerUrl(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setExternalAttemptHandlerUrl", "externalAttemptHandlerUrl", "java.lang.String"));
        key = "blackboard.persist.Id getGradingPeriodId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getGradingPeriodId", "", "gradingPeriodId", "blackboard.persist.Id"));
        key = "void setGradingPeriodId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setGradingPeriodId", "gradingPeriodId", "blackboard.persist.Id"));
        key = "blackboard.persist.Id getGradingSchemaId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getGradingSchemaId", "", "gradingSchemaId", "blackboard.persist.Id"));
        key = "void setGradingSchemaId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setGradingSchemaId", "gradingSchemaId", "blackboard.persist.Id"));
        key = "boolean isDeleted();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isDeleted", "is", "deleted", "boolean"));
        key = "void setDeleted(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setDeleted", "deleted", "boolean"));
        key = "boolean isHideAttempt();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isHideAttempt", "is", "hideAttempt", "boolean"));
        key = "void setHideAttempt(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setHideAttempt", "hideAttempt", "boolean"));
        key = "boolean isLimitedAttendance();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isLimitedAttendance", "is", "limitedAttendance", "boolean"));
        key = "void setLimitedAttendance(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setLimitedAttendance", "limitedAttendance", "boolean"));
        key = "boolean isScorable();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isScorable", "is", "scorable", "boolean"));
        key = "void setScorable(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setScorable", "scorable", "boolean"));
        key = "boolean isShowStatsToStudent();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isShowStatsToStudent", "is", "showStatsToStudent", "boolean"));
        key = "void setShowStatsToStudent(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setShowStatsToStudent", "showStatsToStudent", "boolean"));
        key = "boolean isSingleAttempt();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isSingleAttempt", "is", "singleAttempt", "boolean"));
        key = "void setSingleAttempt(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setSingleAttempt", "singleAttempt", "boolean"));
        key = "boolean isUserCreatedColumn();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isUserCreatedColumn", "is", "userCreatedColumn", "boolean"));
        key = "void setUserCreatedColumn(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setUserCreatedColumn", "userCreatedColumn", "boolean"));
        key = "boolean isVisibleInAllTerms();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isVisibleInAllTerms", "is", "visibleInAllTerms", "boolean"));
        key = "void setVisibleInAllTerms(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setVisibleInAllTerms", "visibleInAllTerms", "boolean"));
        key = "boolean isVisibleInBook();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isVisibleInBook", "is", "visibleInBook", "boolean"));
        key = "void setVisibleInBook(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setVisibleInBook", "visibleInBook", "boolean"));
        key = "boolean isVisibleToStudents();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("isVisibleToStudents", "is", "visibleToStudents", "boolean"));
        key = "void setVisibleToStudents(boolean);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setVisibleToStudents", "visibleToStudents", "boolean"));
        key = "java.lang.String getLinkId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getLinkId", "", "linkId", "java.lang.String"));
        key = "void setLinkId(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setLinkId", "linkId", "java.lang.String"));
        key = "int getMaxAttempts();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getMaxAttempts", "", "maxAttempts", "int"));
        key = "void setMaxAttempts(int);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setMaxAttempts", "maxAttempts", "int"));
        key = "double getPoints();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getPoints", "", "points", "double"));
        key = "void setPoints(double);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setPoints", "points", "double"));
        key = "int getPosition();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getPosition", "", "position", "int"));
        key = "void setPosition(int);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setPosition", "position", "int"));
        key = "java.lang.String getScoreProviderHandle();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getScoreProviderHandle", "", "scoreProviderHandle", "java.lang.String"));
        key = "void setScoreProviderHandle(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setScoreProviderHandle", "scoreProviderHandle", "java.lang.String"));
        key = "blackboard.persist.Id getSecondaryGradingSchemaId();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getSecondaryGradingSchemaId", "", "secondaryGradingSchemaId", "blackboard.persist.Id"));
        key = "void setSecondaryGradingSchemaId(blackboard.persist.Id);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setSecondaryGradingSchemaId", "secondaryGradingSchemaId", "blackboard.persist.Id"));
        key = "java.lang.String getTitle();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getTitle", "", "title", "java.lang.String"));
        key = "void setTitle(java.lang.String);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setTitle", "title", "java.lang.String"));
        key = "float getWeight();";
        this.bbGetter2WSFieldMap.put(key, new WsgBbGetterRegulationStruct("getWeight", "", "weight", "float"));
        key = "void setWeight(float);";
        this.bbSetter2WSFieldMap.put(key, new WsgBbSetterRegulationStruct("setWeight", "weight", "float"));
    }

    @Override
    public void fillDataType2ValuesMap() {
        String key;
        List<String> list;
        key = "blackboard.base.FormattedText";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "blackboard.persist.DataType";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "blackboard.persist.Id";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "blackboard.platform.gradebook2.GradableItem$AttemptAggregationModel";
        list = new ArrayList<String>();
        list.add("Average");
        list.add("First");
        list.add("Highest");
        list.add("Last");
        list.add("Lowest");
        this.dataType2ValuesMap.put(key, list);
        key = "blackboard.platform.gradebook2.GradableItem$CalculationType";
        list = new ArrayList<String>();
        list.add("AVERAGE");
        list.add("MINMAX");
        list.add("NON_CALCULATED");
        list.add("TOTAL");
        list.add("WEIGHTED_TOTAL");
        this.dataType2ValuesMap.put(key, list);
        key = "boolean";
        list = new ArrayList<String>();
        list.add("false");
        list.add("true");
        this.dataType2ValuesMap.put(key, list);
        key = "double";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "float";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "int";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "java.lang.String";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
        key = "java.util.Calendar";
        list = new ArrayList<String>();
        this.dataType2ValuesMap.put(key, list);
    }

    @Override
    protected void fillExcludedApiMethodNamesMap() {
        String comment;
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.persist.Id getGradeAttemptId(blackboard.platform.gradebook2.GradableItem, blackboard.platform.gradebook2.GradeDetail);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.persist.Id getOrCreateGradeId(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.persist.Id updateOverride(blackboard.persist.Id, blackboard.persist.Id, double, java.lang.String);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.persist.Id updateOverride(blackboard.persist.Id, blackboard.persist.Id, double, java.lang.String, blackboard.base.FormattedText, blackboard.base.FormattedText);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.persist.Id updateOverride(blackboard.persist.Id, blackboard.persist.Id, double, java.lang.String, blackboard.base.FormattedText, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.AttemptDetail createAttempt(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.AttemptDetail getAttempt(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.BookData getBookData(blackboard.platform.gradebook2.BookDataRequest);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.CourseUserInformation getCourseUserInfo(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.CumulativeGradingFormula getCumulativeFormulaForItem(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.DefaultGradingSchema getDefaultGradingSchema();", comment);
        comment = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);is a a better choice";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradableItem createGradableItem(java.lang.String, blackboard.persist.Id, double, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradeDetail getGradeDetail(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradeDetail getGradeDetailForAttempt(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradeDetail getGradeDetailWithAttemptsAndHistory(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradeWithAttemptScore getCourseGrade(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradeWithAttemptScore getGrade(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradebookCustomView getCustomView(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradebookSettings getGradebookSettings(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradebookType getGradebookType(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradingPeriod getGradingPeriod(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("blackboard.platform.gradebook2.GradingSchema getGradingSchema(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean addBonusAttempt(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean isEmptyItem(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean isLoggingControlAvailable(blackboard.data.course.Course$ServiceLevel);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean isLoggingDeletionAllowed(blackboard.data.course.Course$ServiceLevel);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean isLoggingEnabledForCourse(blackboard.persist.Id, blackboard.data.course.Course$ServiceLevel);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean isLoggingEnabledForSystem(blackboard.data.course.Course$ServiceLevel);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean refreshCalculatedGrades(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("boolean refreshCalculatedGrades(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("int getCourseGradeHistoryCountBySince(blackboard.persist.Id, blackboard.persist.Id, java.util.Calendar);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("int getNumCourseGradeHistory(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("int updateUserVisibility(long, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.Collection getStudentChanges(blackboard.persist.Id, blackboard.persist.Id, long);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getAttemptIds(blackboard.persist.Id, blackboard.platform.gradebook2.AttemptManager$AttemptSelectionOption, java.util.Calendar, java.util.Calendar);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getAttemptInfos(blackboard.persist.Id, blackboard.platform.gradebook2.AttemptStatus);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getAttempts(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getAttemptsByStatusItemIdAndUserId(blackboard.platform.gradebook2.AttemptStatus, blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getCourseGradeHistory(blackboard.persist.Id, blackboard.persist.Id, java.util.Calendar);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getCourseGradeHistory(blackboard.persist.Id, blackboard.persist.Id, java.util.Calendar, boolean, int, int);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getCustomViews(blackboard.persist.Id, long);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getFavoriteCustomViews(blackboard.persist.Id);", comment);
        comment = "returns list of GradableItemForDisplay, which has just a subset of GradableItem data";
        this.excludedApiMethodNamesMap.put("java.util.List getGradableItemsForDisplay(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradebookTypeForCourse(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradesForItem(blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradesForItem(blackboard.persist.Id, boolean, long);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradingPeriods(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradingSchemaForCourse(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradingSchemaNames(blackboard.persist.Id, java.lang.String);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGradingSchemasWithSymbols(blackboard.persist.Id, long);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getGroups(blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getStudentInfoLayouts(blackboard.persist.Id, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getStudentList(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List getStudentListByLimitedGrader(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List setAllB2navItems();", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.List transferOwnershipIfUnlinked(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.Map getComments(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.Map getInfoForReport(blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.Map importGradebook(blackboard.platform.gradebook2.CsvGradebookData, java.util.List, blackboard.persist.Id, java.util.Set);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("java.util.Map setColumnStudentVisibility(long, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long setComments(blackboard.persist.Id, blackboard.persist.Id, blackboard.base.FormattedText, blackboard.base.FormattedText, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long updateAttemptGrade(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id, double, java.lang.String);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long updateAttemptGrade(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id, double, java.lang.String, blackboard.base.FormattedText, blackboard.base.FormattedText);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long updateAttemptGrade(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id, double, java.lang.String, blackboard.base.FormattedText, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long updateAttemptGrade(blackboard.platform.gradebook2.AttemptDetail, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long updateAttemptGrade(blackboard.platform.gradebook2.AttemptDetail, blackboard.persist.Id, blackboard.persist.Id, javax.servlet.http.HttpServletRequest, boolean, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("long updateOverride(blackboard.platform.gradebook2.GradeDetail, boolean, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void addAllAsAttendee(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void addAllAsAttendee(java.lang.String, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void adjustAttemptGrade(blackboard.persist.Id, float, java.lang.String, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void associatePeriodToItems(blackboard.platform.gradebook2.GradingPeriod);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void clearAll(boolean, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void clearHistory(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void clearSelected(java.util.Collection, boolean, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void copyGradingSchema(blackboard.persist.Id, java.lang.String);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void createCumulativeFormulaItem(blackboard.platform.gradebook2.GradableItem, java.lang.String, java.util.Map);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void createCustomView(blackboard.platform.gradebook2.GradebookCustomView);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void createGradingPeriod(blackboard.platform.gradebook2.GradingPeriod, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void createGradingSchema(blackboard.platform.gradebook2.GradingSchema);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void createStudentInfoLayout(blackboard.platform.gradebook2.GradebookStudentInfoLayout);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleClearAttemptGradeNotification(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleClearAttemptNotification(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleGradeAttemptNotification(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleGradeAttemptNotification(blackboard.persist.Id, blackboard.platform.gradebook2.AttemptDetail, blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleGradeDetailNotification(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleGradeDetailNotification(blackboard.persist.Id, blackboard.platform.gradebook2.GradeDetail, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handleGradeItemDeleteNotification(blackboard.platform.gradebook2.GradableItem);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void handlesNotification(blackboard.platform.gradebook2.GradableItem, boolean, blackboard.platform.gradebook2.GradableItem);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void hideItem(long, java.lang.String);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void modifyDefaultGradingSchema(blackboard.platform.gradebook2.DefaultGradingSchema);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void persist(blackboard.platform.gradebook2.GradebookType);", comment);
        comment = "public void persistGradebookItem(GradableItem g, boolean primarySchemaChanged) should be used, gradebook\\gradebook2\\instructor\\addModifyItemDefinition.jspform.elements.primarySchemaChanged.value = (originalSchema == '${textSchemaID}') && (currentSchema != '${textSchemaID}') ? 'true' : 'false';";
        this.excludedApiMethodNamesMap.put("void persistGradebookItem(blackboard.platform.gradebook2.GradableItem);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void removeAttempt(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void removeCustomView(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void removeGradingPeriod(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void removeGradingSchema(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void removeNonStudentAttempts(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void removeUserDefinedGradebookType(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void setAttemptGrade(blackboard.persist.Id, double, java.lang.String, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void setAttemptIgnored(blackboard.persist.Id, blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void setAttemptToNeedsGrading(blackboard.persist.Id, java.lang.String, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void setFavoriteCustomView(blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void setGradebookCourseAvailability(blackboard.persist.Id, blackboard.data.course.Course$ServiceLevel, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void setLimitedAttendance(blackboard.persist.Id, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void showAllStudentsExcluding(blackboard.persist.Id, java.util.Collection);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void syncAttendanceWithGroup(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void syncAttendanceWithGroup(java.lang.String, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void syncAttendanceWithGroups(blackboard.persist.Id, java.util.Collection);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void transferOwnershipToGradeCenter(blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void transferOwnershipToGradeCenter(blackboard.persist.Id, java.lang.String);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateDefaultView(blackboard.persist.Id, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateExemption(blackboard.persist.Id, blackboard.persist.Id, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateGrade(blackboard.platform.gradebook2.GradeDetail, boolean, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateGrade(double, java.lang.String, blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing action prefix partern (Load:[load, get]Insert:[create, persist]Update:[persist]Persist:[persist]Delete:[delete]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateGradebookItemLayout(blackboard.persist.Id, blackboard.persist.Id, int, blackboard.persist.Id, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateGradingPeriodPosition(blackboard.persist.Id, int);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateNumFrozenColumnsSetting(blackboard.persist.Id, int);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateOverrideComments(blackboard.platform.gradebook2.GradeDetail, boolean, boolean);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updatePublicItemId(blackboard.persist.Id, blackboard.persist.Id);", comment);
        comment = "Missing data class name ([GradableItem, GradebookItem]) in method name; ";
        this.excludedApiMethodNamesMap.put("void updateStudentInfoLayoutPosition(blackboard.persist.Id, int, boolean);", comment);
    }

    protected void fillIncludedApiMethodNamesMap() {
        String comment;
    }

    @Override
    protected void fillApiRegulationList() {
        WsgApiRegulationStruct apiRegulationStruct;
        List<WsgApiDataKind> apiParamKindList;
        List<String> apiParamTypeNameList;
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemDeleteListById";
            apiRegulationStruct.bbMethodSignature = "void deleteGradebookItem(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Delete;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListById;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.ListById;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemDeleteRecordById";
            apiRegulationStruct.bbMethodSignature = "void deleteGradebookItem(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Delete;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemInsertListById";
            apiRegulationStruct.bbMethodSignature = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Insert;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListById;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.ListById;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.platform.gradebook2.GradableItem");
            apiParamTypeNameList.add("boolean");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemInsertRecordById";
            apiRegulationStruct.bbMethodSignature = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Insert;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.platform.gradebook2.GradableItem");
            apiParamTypeNameList.add("boolean");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadListByCourseId";
            apiRegulationStruct.bbMethodSignature = "java.util.List getGradebookItems(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListByTemplate;
            apiRegulationStruct.needsApiParam = true;
            apiRegulationStruct.apiResultTypeName = "java.util.List";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ByCourseId";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadListByGradingPeriodId";
            apiRegulationStruct.bbMethodSignature = "java.util.List getGradebookItemsByGradingPeriod(blackboard.persist.Id, long);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListByTemplate;
            apiRegulationStruct.needsApiParam = true;
            apiRegulationStruct.apiResultTypeName = "java.util.List";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiParamTypeNameList.add("long");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ByGradingPeriodId";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadListByGradingPeriodIdAndBookVersion";
            apiRegulationStruct.bbMethodSignature = "java.util.List getGradebookItemsByGradingPeriod(blackboard.persist.Id, long);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListByTemplate;
            apiRegulationStruct.needsApiParam = true;
            apiRegulationStruct.apiResultTypeName = "java.util.List";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiParamTypeNameList.add("long");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ByGradingPeriodIdAndBookVersion";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadListById";
            apiRegulationStruct.bbMethodSignature = "blackboard.platform.gradebook2.GradableItem getGradebookItem(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListById;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "blackboard.platform.gradebook2.GradableItem";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.ListById;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadRecordByAssessmentId";
            apiRegulationStruct.bbMethodSignature = "blackboard.platform.gradebook2.GradableItem getGradebookItemByAssessmentId(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "blackboard.platform.gradebook2.GradableItem";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ByAssessmentId";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadRecordByCourseContentId";
            apiRegulationStruct.bbMethodSignature = "blackboard.platform.gradebook2.GradableItem getGradebookItemByContentId(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "blackboard.platform.gradebook2.GradableItem";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ByCourseContentId";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemLoadRecordById";
            apiRegulationStruct.bbMethodSignature = "blackboard.platform.gradebook2.GradableItem getGradebookItem(blackboard.persist.Id);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Load;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "blackboard.platform.gradebook2.GradableItem";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Record));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.persist.Id");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemPersistListById";
            apiRegulationStruct.bbMethodSignature = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Persist;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListById;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.ListById;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.platform.gradebook2.GradableItem");
            apiParamTypeNameList.add("boolean");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemPersistRecordById";
            apiRegulationStruct.bbMethodSignature = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Persist;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.platform.gradebook2.GradableItem");
            apiParamTypeNameList.add("boolean");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemUpdateListById";
            apiRegulationStruct.bbMethodSignature = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Update;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.ListById;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.ListById;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.platform.gradebook2.GradableItem");
            apiParamTypeNameList.add("boolean");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
        {
            apiRegulationStruct = new WsgApiRegulationStruct();
            apiRegulationStruct.wsMethodName = "gradableItemUpdateRecordById";
            apiRegulationStruct.bbMethodSignature = "void persistGradebookItem(blackboard.platform.gradebook2.GradableItem, boolean);";
            apiRegulationStruct.apiOperation = WsgApiOperationKind.Update;
            apiRegulationStruct.apiResultKind = WsgApiDataKind.Record;
            apiRegulationStruct.needsApiParam = false;
            apiRegulationStruct.apiResultTypeName = "void";
            apiParamKindList = new ArrayList<WsgApiDataKind>();
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiParamKindList.add((WsgApiDataKind.Unknown));
            apiRegulationStruct.apiParamKindList = apiParamKindList;
            apiRegulationStruct.apiParamKind = WsgApiDataKind.Record;
            apiParamTypeNameList = new ArrayList<String>();
            apiParamTypeNameList.add("blackboard.platform.gradebook2.GradableItem");
            apiParamTypeNameList.add("boolean");
            apiRegulationStruct.apiParamTypeNameList = apiParamTypeNameList;
            apiRegulationStruct.apiBySuffix = "ById";
            apiRegulationStruct.comment = "";
            this.apiRegulationList.add(apiRegulationStruct);
        }
    }

}
